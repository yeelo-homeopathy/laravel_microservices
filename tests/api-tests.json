{
  "info": {
    "name": "E-commerce Platform API Tests",
    "description": "Comprehensive API testing for the e-commerce microservices platform",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "identityUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "catalogUrl",
      "value": "http://localhost:3002",
      "type": "string"
    },
    {
      "key": "ordersUrl",
      "value": "http://localhost:3004",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Checks",
      "item": [
        {
          "name": "API Gateway Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Identity Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{identityUrl}}/health",
              "host": ["{{identityUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Catalog Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{catalogUrl}}/health",
              "host": ["{{catalogUrl}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "Orders Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{ordersUrl}}/health",
              "host": ["{{ordersUrl}}"],
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201 or 422', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 422]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    pm.test('Response has user data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('user');",
                  "        pm.expect(jsonData).to.have.property('token');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@ecommerce.local\",\n  \"password\": \"password\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 401', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 422]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response has token', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('token');",
                  "        pm.collectionVariables.set('authToken', jsonData.token);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Service Proxy Tests",
      "item": [
        {
          "name": "Identity Service via Gateway",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/identity/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "identity", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Gateway can proxy to Identity service', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Catalog Service via Gateway",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/catalog/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "catalog", "health"]
            }
          }
        },
        {
          "name": "Orders Service via Gateway",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "health"]
            }
          }
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "API Response Time Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response size is reasonable', function () {",
                  "    pm.expect(pm.response.responseSize).to.be.below(10000);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
