# Production-ready Docker Compose for E-commerce Microservices Platform
# This orchestrates all infrastructure services needed for the platform
version: "3.8"

services:
  # =============================================================================
  # REVERSE PROXY & LOAD BALANCER
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: ecom_nginx
    ports:
      - "8080:80"  # Main application port
      - "8443:443" # HTTPS port for production
    volumes:
      - ./apps/laravel-core/public:/var/www/html/public:ro
      - ./infrastructure/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - laravel-core
    networks:
      - ecom-network
    restart: unless-stopped

  # =============================================================================
  # LARAVEL CORE APPLICATION (API Gateway + Admin Panel)
  # =============================================================================
  laravel-core:
    build:
      context: ./apps/laravel-core
      dockerfile: Dockerfile
      target: production
    container_name: ecom_laravel
    volumes:
      - ./apps/laravel-core:/var/www/html
      - laravel_storage:/var/www/html/storage
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=ecom_core
      - DB_USERNAME=ecom_user
      - DB_PASSWORD=ecom_secure_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=ecom_minio
      - MINIO_SECRET_KEY=ecom_minio_secret_key
    depends_on:
      - postgres
      - redis
      - kafka
      - mongo
    networks:
      - ecom-network
    restart: unless-stopped

  # =============================================================================
  # MICROSERVICES (NestJS)
  # =============================================================================
  
  # Identity & Access Management Service
  svc-identity:
    build:
      context: ./apps/svc-identity
      dockerfile: Dockerfile
    container_name: ecom_identity_svc
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ecom_user:ecom_secure_password@postgres:5432/ecom_identity
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - JWT_SECRET=your_super_secure_jwt_secret_key_here
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ecom-network
    restart: unless-stopped

  # Catalog Management Service
  svc-catalog:
    build:
      context: ./apps/svc-catalog
      dockerfile: Dockerfile
    container_name: ecom_catalog_svc
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/ecom_catalog
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=ecom_minio
      - MINIO_SECRET_KEY=ecom_minio_secret_key
    depends_on:
      - mongo
      - redis
      - kafka
      - minio
    networks:
      - ecom-network
    restart: unless-stopped

  # Inventory Management Service
  svc-inventory:
    build:
      context: ./apps/svc-inventory
      dockerfile: Dockerfile
    container_name: ecom_inventory_svc
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ecom_user:ecom_secure_password@postgres:5432/ecom_inventory
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ecom-network
    restart: unless-stopped

  # Orders Management Service
  svc-orders:
    build:
      context: ./apps/svc-orders
      dockerfile: Dockerfile
    container_name: ecom_orders_svc
    ports:
      - "3004:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ecom_user:ecom_secure_password@postgres:5432/ecom_orders
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ecom-network
    restart: unless-stopped

  # Payment Orchestrator Service
  svc-payments:
    build:
      context: ./apps/svc-payments
      dockerfile: Dockerfile
    container_name: ecom_payments_svc
    ports:
      - "3005:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ecom_user:ecom_secure_password@postgres:5432/ecom_payments
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
      - RAZORPAY_KEY_ID=your_razorpay_key_id
      - RAZORPAY_KEY_SECRET=your_razorpay_secret
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ecom-network
    restart: unless-stopped

  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  # PostgreSQL - Primary OLTP Database
  postgres:
    image: postgres:16-alpine
    container_name: ecom_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ecom_core
      POSTGRES_USER: ecom_user
      POSTGRES_PASSWORD: ecom_secure_password
      POSTGRES_MULTIPLE_DATABASES: ecom_identity,ecom_inventory,ecom_orders,ecom_payments
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
      - ./infrastructure/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - ecom-network
    restart: unless-stopped
    # Performance tuning for production
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # MongoDB - Flexible Schema for Catalog
  mongo:
    image: mongo:7
    container_name: ecom_mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ecom_mongo_admin
      MONGO_INITDB_ROOT_PASSWORD: ecom_mongo_admin_password
      MONGO_INITDB_DATABASE: ecom_catalog
    volumes:
      - mongo_data:/data/db
      - ./infrastructure/mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ecom-network
    restart: unless-stopped

  # =============================================================================
  # CACHING & SESSION STORE
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: ecom_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ecom-network
    restart: unless-stopped
    # Enable persistence and configure memory limits
    command: redis-server /usr/local/etc/redis/redis.conf

  # =============================================================================
  # MESSAGE BROKER (Event Streaming)
  # =============================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: ecom_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - ecom-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: ecom_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      # Performance tuning
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - ecom-network
    restart: unless-stopped

  # Kafka UI for development and monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ecom_kafka_ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ecom-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - ecom-network
    restart: unless-stopped

  # =============================================================================
  # OBJECT STORAGE
  # =============================================================================
  minio:
    image: minio/minio:latest
    container_name: ecom_minio
    ports:
      - "9000:9000"   # API port
      - "9001:9001"   # Console port
    environment:
      MINIO_ROOT_USER: ecom_minio
      MINIO_ROOT_PASSWORD: ecom_minio_secret_key
      MINIO_DOMAIN: minio
      MINIO_REGION_NAME: us-east-1
    volumes:
      - minio_data:/data
    networks:
      - ecom-network
    restart: unless-stopped
    command: server /data --console-address ":9001"

  # =============================================================================
  # SEARCH ENGINE
  # =============================================================================
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: ecom_opensearch
    environment:
      - cluster.name=ecom-search-cluster
      - node.name=ecom-search-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"
    networks:
      - ecom-network
    restart: unless-stopped

  # OpenSearch Dashboards for search analytics
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.0
    container_name: ecom_opensearch_dashboards
    ports:
      - "5601:5601"
    environment:
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: true
    depends_on:
      - opensearch
    networks:
      - ecom-network
    restart: unless-stopped

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ecom_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ecom-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ecom_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ecom-network
    restart: unless-stopped

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================
networks:
  ecom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  minio_data:
    driver: local
  opensearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  laravel_storage:
    driver: local
