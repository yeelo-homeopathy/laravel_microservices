version: "3.8"

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ecom-nginx
    depends_on:
      - laravel-core
    ports:
      - "8080:80"
    volumes:
      - ../apps/laravel-core/public:/var/www/html/public:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - ecom-network

  # Laravel Core Application (API Gateway/BFF)
  laravel-core:
    build:
      context: ../apps/laravel-core
      dockerfile: Dockerfile
    container_name: ecom-laravel-core
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=ecom_core
      - DB_USERNAME=ecom
      - DB_PASSWORD=ecom123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - ../apps/laravel-core:/var/www/html
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ecom-network

  # Identity Microservice (NestJS)
  svc-identity:
    build:
      context: ../apps/svc-identity
      dockerfile: Dockerfile
    container_name: ecom-svc-identity
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ecom_identity
      - DB_USER=ecom
      - DB_PASS=ecom123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "3001:3000"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ecom-network

  # Catalog Microservice (NestJS + MongoDB)
  svc-catalog:
    build:
      context: ../apps/svc-catalog
      dockerfile: Dockerfile
    container_name: ecom-svc-catalog
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://mongo:27017/ecom_catalog
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio12345
    ports:
      - "3002:3000"
    depends_on:
      - mongo
      - redis
      - kafka
      - minio
    networks:
      - ecom-network

  # Inventory Microservice (NestJS)
  svc-inventory:
    build:
      context: ../apps/svc-inventory
      dockerfile: Dockerfile
    container_name: ecom-svc-inventory
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ecom_inventory
      - DB_USER=ecom
      - DB_PASS=ecom123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "3003:3000"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ecom-network

  # Orders Microservice (NestJS)
  svc-orders:
    build:
      context: ../apps/svc-orders
      dockerfile: Dockerfile
    container_name: ecom-svc-orders
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ecom_orders
      - DB_USER=ecom
      - DB_PASS=ecom123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "3004:3000"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ecom-network

  # Payments Microservice (NestJS)
  svc-payments:
    build:
      context: ../apps/svc-payments
      dockerfile: Dockerfile
    container_name: ecom-svc-payments
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ecom_payments
      - DB_USER=ecom
      - DB_PASS=ecom123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "3005:3000"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ecom-network

  # Next.js Frontend Application
  nextjs-frontend:
    build:
      context: ../apps/nextjs-frontend
      dockerfile: Dockerfile
    container_name: ecom-nextjs-frontend
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8080/api
      - NEXT_PUBLIC_LARAVEL_URL=http://laravel-core:80
    ports:
      - "3000:3000"
    volumes:
      - ../apps/nextjs-frontend:/app
      - /app/node_modules
    networks:
      - ecom-network

  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: ecom-postgres
    environment:
      POSTGRES_DB: ecom_core
      POSTGRES_USER: ecom
      POSTGRES_PASSWORD: ecom123
      POSTGRES_MULTIPLE_DATABASES: ecom_identity,ecom_inventory,ecom_orders,ecom_payments
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - ecom-network

  # MongoDB for Catalog
  mongo:
    image: mongo:7
    container_name: ecom-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ecom-network

  # Redis for Caching and Queues
  redis:
    image: redis:7-alpine
    container_name: ecom-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - ecom-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: ecom-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - ecom-network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: ecom-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - ecom-network

  # Kafka UI for Development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ecom-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - ecom-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: ecom-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio12345
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - ecom-network

  # OpenSearch for Product Search
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: ecom-opensearch
    environment:
      - cluster.name=ecom-cluster
      - node.name=ecom-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    networks:
      - ecom-network

  # OpenSearch Dashboards
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.0
    container_name: ecom-opensearch-dashboards
    ports:
      - "5601:5601"
    environment:
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: true
    depends_on:
      - opensearch
    networks:
      - ecom-network

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  minio_data:
  opensearch_data:

networks:
  ecom-network:
    driver: bridge
